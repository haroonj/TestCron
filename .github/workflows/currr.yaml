name: Add Mixpanel Annotations on Release

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  annotate_mixpanel:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Set up GitHub CLI
      run: |
        echo "${{ github.token }}" > ~/.gh_token
        gh auth login --with-token < ~/.gh_token

    - name: Get current and previous release information
      run: |
        # Get the current release tag and date
        current_release_tag="${{ github.event.release.tag_name }}"
        current_release_date=$(gh release view "${current_release_tag}" --json createdAt --jq '.createdAt')

        # Get the previous release tag and date (assuming the releases are sorted by date)
        previous_release_tag=$(gh release list --limit 2 --json tagName --jq '.[1].tagName')
        previous_release_date=$(gh release view "${previous_release_tag}" --json createdAt --jq '.createdAt')

        echo "Current release tag: $current_release_tag"
        echo "Current release date: $current_release_date"
        echo "Previous release tag: $previous_release_tag"
        echo "Previous release date: $previous_release_date"

        echo "PREVIOUS_RELEASE_DATE=$previous_release_date" >> $GITHUB_ENV
        echo "CURRENT_RELEASE_DATE=$current_release_date" >> $GITHUB_ENV

    - name: Get merged PRs between releases
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "Fetching merged PRs between ${PREVIOUS_RELEASE_DATE} and ${CURRENT_RELEASE_DATE}..."
        PRS=$(gh pr list --state merged --json title,url,mergedAt,author --search "merged:${PREVIOUS_RELEASE_DATE}..${CURRENT_RELEASE_DATE}")
        echo "PR Data: $PRS"
        echo "MERGED_PRS=$PRS" >> $GITHUB_ENV

    - name: Print annotation text for each PR
      run: |
        echo "Processing PRs to print annotations"

        # Check if the PRS variable is empty
        if [ -z "${MERGED_PRS}" ]; then
          echo "No merged PRs found for this release."
          exit 0
        fi

        # Set the version number dynamically from the release tag
        version="${{ github.event.release.tag_name }}"

        echo "${MERGED_PRS}" | jq -c '.[]' | while read -r pr; do
          title=$(echo "$pr" | jq -r '.title')
          url=$(echo "$pr" | jq -r '.url')
          githubuser=$(echo "$pr" | jq -r '.author.login')
          release_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Construct annotation text in the required format (version: PR Title by @githubuser)
          annotation_text="(version: ${version}: ${title} by @${githubuser})"

          # Print the annotation text for testing
          echo "Annotation text: ${annotation_text}"
        done

    - name: Confirm test completion
      run: echo "Test run for printing annotation texts completed."

name: List All Merged Pull Requests

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  list_merged_prs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository with tags
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all commit history and tags

      # Step 2: Set up the GitHub CLI
      - name: Set up GitHub CLI
        run: sudo apt-get install gh -y

      # Step 3: List releases and store them in releases.txt
      - name: List Releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release list --json tagName,publishedAt --jq '.[] | "\(.tagName)"' > releases.txt

      # Step 4: List merged PRs and store them in merged_prs.csv
      - name: List Merged PRs
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh pr list --state merged --json number,title,mergeCommit,mergedAt --jq '.[] | [.number, .title, .mergeCommit.oid, .mergedAt] | @csv' > merged_prs.csv

      # Step 5: Match PRs with releases and output results
      - name: Match Merged PRs with Releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the correct GH token
        run: |
          echo "Merged PRs with their associated releases:"
          # Loop through each PR entry in merged_prs.csv
          while IFS=, read -r pr_number pr_title pr_commit_sha pr_merged_at; do
            # Loop through each release from releases.txt
            for release in $(cat releases.txt); do
              # Check if the PR commit is an ancestor of the release
              if git merge-base --is-ancestor "$pr_commit_sha" "$release" 2>/dev/null; then
                echo "PR #$pr_number: $pr_title merged at $pr_merged_at, included in release $release"
                break  # Move to the next PR once a match is found
              fi
            done
          done < merged_prs.csv



      # Step 6: Cleanup Git configurations
      - name: Post job cleanup
        run: |
          git config --local --unset-all http.https://github.com/.extraheader
          git config --local --unset-all core.sshCommand
